#!/bin/bash

### The main manage script for WMAgent
WMCoreVersion=$(python -c "from WMCore import __version__ as WMCoreVersion; print(WMCoreVersion)")

# Load common definitions and environment:
source $WMA_DEPLOY_DIR/bin/manage-common.sh
source $WMA_ENV_FILE

#
# Global variables etc
#

RUCIO_CONFIG="$WMA_CONFIG_DIR/etc/rucio.cfg"

GLOBAL_WORKQUEUE_URL=
LOCAL_WORKQUEUE_DBNAME=workqueue

WORKLOAD_SUMMARY_URL=
WORKLOAD_SUMMARY_DBNAME=workloadsummary

# Loading the WMAgent.Secrets file
_load_wmasecrets || { err=$?; echo "$(basename $0): ERROR: Could not load WMAgent.secrets file: $WMA_SECRETS_FILE"; exit 1 ;}


# callbacks to activate or show initialization has been done
activate_agent(){
    # The very first step of activating the WMAgent upon all needed checks and
    # validations performed during the initialization process.
    # No .init* flags are checked at this stage.
    cp -vf $WMA_DEPLOY_DIR/etc/WMAgentConfig.py $WMA_CONFIG_DIR/config-template.py
}

#
# Database prompt so that people can poke around in the db interactively
#
db_prompt(){
    case $AGENT_FLAVOR in
        'mysql')
            mysql -u $MYSQL_USER --password=$MYSQL_PASS -h $MYSQL_HOST --database=$wmaDBName --pager='less -SFX'
            ;;
        'oracle')
            rlwrap -H ~/.sqlplus_history -pgreen sqlplus $ORACLE_USER/$ORACLE_PASS@$ORACLE_TNS
            ;;
        *)
            echo "$FUNCNAME: ERROR: Unknown or not set Agent Flavor/Database"
            return $(false)
            ;;
    esac
}


##############################
#  Agent stuff               #
##############################

# generate the agent config from the basic template
init_wmagent(){

    case $AGENT_FLAVOR in
        'mysql')
            _exec_mysql "create database if not exists $wmaDBName" && \
                echo "$FUNCNAME: MYSQL database: $wmaDBName has been created"
            local database_options="--mysql_url=mysql://$MYSQL_USER:$MYSQL_PASS@$MYSQL_HOST/$wmaDBName "
            ;;
        'oracle')
            echo "$FUNCNAME: NOT IMPLEMENTED"
            local database_options="--coredb_url=oracle://$ORACLE_USER:$ORACLE_PASS@$ORACLE_TNS "
            ;;
        *)
            echo "$FUNCNAME: ERROR: Unknown or not set Agent Flavor"
            return $(false)
            ;;
    esac

    local errVal=0
    wmagent-mod-config $database_options \
	                   --input=$WMA_CONFIG_DIR/config-template.py \
                       --output=$WMA_CONFIG_DIR/config.py \
                       --working_dir=$WMA_INSTALL_DIR \
                       --couch_url=http://$COUCH_USER:$COUCH_PASS@$COUCH_HOST:$COUCH_PORT \
                       --global_workqueue_url=$GLOBAL_WORKQUEUE_URL \
                       --workqueue_db_name=$LOCAL_WORKQUEUE_DBNAME \
                       --workload_summary_url=$WORKLOAD_SUMMARY_URL \
                       --grafana_token=$GRAFANA_TOKEN \
                       --wmstats_url=$WMSTATS_URL \
                       --reqmgr2_url=$REQMGR2_URL \
	                   --acdc_url=$ACDC_URL \
	                   --dbs3_url=$DBS3_URL \
	                   --dqm_url=$DQM_URL \
	                   --requestcouch_url=$REQUESTCOUCH_URL \
	                   --central_logdb_url=$CENTRAL_LOGDB_URL \
	                   --wmarchive_url=$WMARCHIVE_URL \
	                   --amq_credentials=$AMQ_CREDENTIALS \
	                   --rucio_account=$RUCIO_ACCOUNT \
	                   --rucio_host=$RUCIO_HOST \
	                   --rucio_auth=$RUCIO_AUTH
    let errVal+=$?

    wmcore-db-init --config $WMA_CONFIG_DIR/config.py --create --modules=WMCore.WMBS,WMCore.Agent.Database,WMComponent.DBS3Buffer,WMCore.BossAir,WMCore.ResourceControl;
    let errVal+=$?
    export WMAGENT_CONFIG=$WMA_CONFIG_DIR/config.py
    wmagent-couchapp-init
    let errVal+=$?
    unset WMAGENT_CONFIG

    return $errVal
}


init_agent(){
    if _init_valid $wmaInitActive ; then
        echo "Initialising Agent..."
        init_wmagent
    else
        echo "ERROR: This agent has not been activated yet. Cannot proceed."
        return $(false)
    fi
}

start_agent(){
    if  _init_valid $wmaInitUsing ; then
        echo "Starting WMAgent..."
        wmcoreD --start --config=$WMA_CONFIG_DIR/config.py
    else
        echo "ERROR: This agent is not fully initialized. Cannot use it."
        return $(false)
    fi
}

stop_agent(){
    if  _init_valid $wmaInitUsing ; then
        echo "Shutting down WMAgent...";
        wmcoreD --shutdown --config=$WMA_CONFIG_DIR/config.py;
    else
        echo "ERROR: This agent is not fully initialized. Cannot use it."
        return $(false)
    fi
}

status_of_agent(){
    if  _init_valid $wmaInitUsing ; then
        echo "Status of WMAgent:"
        wmcoreD --status --config=$WMA_CONFIG_DIR/config.py
    else
        echo "ERROR: This agent is not fully initialized. Cannot use it."
        return $(false)
    fi
}


#
# revert agent back to pre initialised state & wipe out
# everything currently in existence.
clean_agent(){
    stop_agent;
    if  _init_valid $wmaInitActive ; then
        echo "Cleaning WMAgent..."
        rm -rf $WMA_INSTALL_DIR/*
        rm -f $WMA_CONFIG_DIR/config.py;

        case $AGENT_FLAVOR in
            'mysql')
                _exec_mysql "drop database $wmaDBName"
                _exec_mysql "create database $wmaDBName"
                rm -f $wmaInitAgent
                rm -f $wmaInitSqlDB
                ;;
            'oracle')
                echo "$FUNCNAME: Not Implemented"
                ;;
            *)
                echo "$FUNCNAME: ERROR: Unknown or not set Agent Flavor"
                return $(false)
                ;;
        esac

    else
        echo "ERROR: This agent is not yet activated. Cannot clean it."
        return $(false)
    fi
}

# Wipe out MySQL and Oracle databases
# Will cause next start to recreate databases
clean_mysql(){
    [[ -z $MYSQL_USER ]] && { echo "Not using MySQL..."; exit 1 ; }
    echo "Dropping MySQL DB... ";
    _exec_mysql "drop database $wmaDBName"
    rm -f $wmaInitSqlDB
}

clean_oracle(){
    echo "NOT IMPLEMENTED"
}

status(){
    echo "----------------------------------------------------------------------"
    echo "Status of services:"
    _status_of_couch;
    echo
    echo
    case $AGENT_FLAVOR in
        'mysql')
            _status_of_mysql;
            ;;
        'oracle')
            _status_of_oracle;
            ;;
        *)
            echo "$FUNCNAME: ERROR: Unknown or not set Agent Flavor"
            return $(false)
            ;;
    esac
    echo
    echo
    echo "----------------------------------------------------------------------"
    echo "Status of WMAgent components:"
    status_of_agent;
    echo "----------------------------------------------------------------------"
}

clean_all(){

    case $AGENT_FLAVOR in
        'mysql')
	        clean_mysql;
            ;;
        'oracle')
            echo "$FUNCNAME: Not implemented"
            ;;
        *)
            echo "$FUNCNAME: ERROR: Unknown or not set Agent Flavor"
            return $(false)
            ;;
    esac

    clean_couch;
    clean_agent;
}

execute_command_agent(){
    shift;
    local RUNTHIS=$1
    local WMCORE_BIN_DIR=$WMCORE_ROOT/bin
    if [ ! -e $WMCORE_BIN_DIR/$1 ]; then
        echo "$RUNTHIS is not a binary in WMCore/bin"
        exit 1
    fi
    shift;

    export WMAGENT_CONFIG=$WMA_CONFIG_DIR/config.py
    echo "Executing $RUNTHIS $@ ..."
    $RUNTHIS $@;
}

help(){
    echo -e $*
    cat <<EOF

WMCoreVersion: v$WMCoreVersion

The manage script for WMAgent. It is used to:
 * Check if all components status
 * Check if all needed system services (i.e. MariaDB and CouchDB) are up and running
 * Check and populate the agent's resource-control data based on host and runtime information
 * Create or reuse an agent configuration file based on the host and runtime information
 * Start/Stop the agent

Usage: manage [ status | start-agent | stop-agent | activate-agent | init-agent  |
                clean-mysql | clean-oracle | clean-couch | clean-agent | clean-all | renew-proxy |
                db-prompt <sql command> |
                execue-agent <agent command> ]

EOF
}

usage(){
    help $*
    exit 1
}


#######################################################
# Main
#######################################################

case $1 in
  status)
    status ;;
  activate-agent)
    activate_agent;;
  db-prompt)
     db_prompt $@;;
  mysql-prompt)
     db_prompt $@;;
  clean-mysql)
      clean_mysql;;
  clean-oracle)
      clean_oracle;;
  clean-couch)
     clean_couch;;
  init-agent)
     init_agent;;
  start-agent)
     start_agent;;
  stop-agent)
     stop_agent;;
  clean-agent)
     clean_agent;;
  clean-all)
     clean_all;;
  execute-agent)
      execute_command_agent $@;;
  renew-proxy)
      _renew_proxy ;;
  help)
      help ;;
  version)
      echo "WMCore  version: $WMCoreVersion"
      echo "WMAgent version: $WMA_TAG";;
  * )
      usage "$0: unknown action '$1', please try '$0 help' or documentation." 1>&2
      exit 1 ;;
esac


